# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Page3.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pickle
import pandas as pd
import numpy as np
import nltk
import string
from sklearn.feature_extraction.text import CountVectorizer
from nltk.stem import WordNetLemmatizer

# Load the model and vectorizer
with open('spam_classifier_model.pkl', 'rb') as file:
    model1 = pickle.load(file)
with open('count_vectorizer.pkl', 'rb') as file:
    count = pickle.load(file)

msg_useful_terms_without_digit = pd.read_csv("msg_useful_terms_without_digit.csv")
msg_useful_terms_without_digit.replace(to_replace = np.nan, value = "", inplace=True)

thread_term_weights = pd.read_csv("thread_term_weights.csv")
thread_term_weights.replace(to_replace = np.nan, value = "", inplace=True)

thread_weights = pd.read_csv("thread_weights.csv")
thread_weights.replace(to_replace = np.nan, value = "", inplace=True)

unwanted_words = [] + list(nltk.corpus.stopwords.words("english")) + list(string.punctuation)

# Ui file
class Ui_Form1(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(994, 663)
        Form.setStyleSheet("background-color:rgb(220, 220, 220)\n"
"")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1056, 731))
        self.widget.setObjectName("widget")
        self.SubjectInput = QtWidgets.QTextEdit(self.widget)
        self.SubjectInput.setGeometry(QtCore.QRect(50, 40, 621, 111))
        self.SubjectInput.setObjectName("SubjectInput")
        self.ContentInput = QtWidgets.QTextEdit(self.widget)
        self.ContentInput.setGeometry(QtCore.QRect(50, 190, 621, 111))
        self.ContentInput.setObjectName("ContentInput")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.widget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(280, 410, 471, 51))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.SpamOutput = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.SpamOutput.setContentsMargins(0, 0, 0, 0)
        self.SpamOutput.setObjectName("SpamOutput")
        self.OutputLabel = QtWidgets.QLabel(self.widget)
        self.OutputLabel.setGeometry(QtCore.QRect(470, 350, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.OutputLabel.setFont(font)
        self.OutputLabel.setObjectName("OutputLabel")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.widget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(280, 480, 471, 171))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.PriorityOutput = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.PriorityOutput.setContentsMargins(0, 0, 0, 0)
        self.PriorityOutput.setObjectName("PriorityOutput")

        # Create CustomButton
        self.TestButton = CustomButton(self.SubjectInput, self.ContentInput, self.PriorityOutput, self.SpamOutput, self.widget)
        self.TestButton.setGeometry(QtCore.QRect(750, 140, 141, 71))
        self.TestButton.setObjectName("TestButton")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    # Ui function
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.SubjectInput.setPlaceholderText(_translate("Form", "Subject Input: "))
        self.ContentInput.setPlaceholderText(_translate("Form", "Content Input: "))
        self.TestButton.setText(_translate("Form", "Test"))
        self.OutputLabel.setText(_translate("Form", "Output"))

# Function to check the input subject and content is spam email or not
def checkSpam(df):
    if df.empty or 'email_text' not in df.columns:
        raise ValueError("DataFrame is empty or does not contain 'email_text' column.")
    
    email_text = df.iloc[0]['email_text']
    email_vector = count.transform([email_text])
    prediction = model1.predict(email_vector.toarray())
    return prediction[0] == 1  

# Function to get the weight for our input
def get_weights(search_term, weight_df, term=True):
    if (len(search_term)>0):
        if term:
            term_match = False
            for search_item in search_term:
                match = weight_df["term"] == search_item
                term_match = term_match | match
        else:
            term_match = weight_df.subject.str.contains(search_term, regex=False)
        
        match_weights = weight_df.weight[term_match]
        if len(match_weights)<1:
            return 1
        else:
            return match_weights.mean()
    else:
        return 1

# Function to give rank to our email
def rank_message(msg):        
    # Then, from thread activity
    is_thread = len(msg.subject.split('re ')) > 1
    if is_thread:
        subject = msg.subject.split('re ')[1]
        msg_thread_activity_wt = get_weights(subject, thread_weights, term=False)
    else:
        msg_thread_activity_wt = 1
    
    try:
        vec = CountVectorizer()
        sub_vec = vec.fit_transform([msg['subject']])
        msg_thread_terms = vec.get_feature_names_out()
        msg_thread_term_wt = get_weights(msg_thread_terms, thread_term_weights)
    except:
        # Some subjects from the test set result in empty vocabulary
        msg_thread_term_wt = 1
    
    try:
        vec = CountVectorizer()
        msg_vec = vec.fit_transform([msg['content']])
        msg_terms = vec.get_feature_names_out()
        msg_terms_wt = get_weights(msg_terms, msg_useful_terms_without_digit)
    except:
        # Some subjects from the test set result in empty vocabulary
        msg_terms_wt = 1
    
    # Calculating Rank
    rank = float(msg_thread_activity_wt) * float(msg_thread_term_wt) * float(msg_terms_wt)
    
    return rank, msg.subject

# Function to remove unwanted words
def remove_unwanted_words(x):
    res = []
    for i, word in enumerate(x):
        if word.isdigit():
            continue
        if word not in unwanted_words:
            res.append(word)
            continue
        if i == 0 and (word in ["re", "fw"]):
            res.append(word)
            continue
    return res

# Function to perform lemmatization
def lemmatization(x):
    lemmatizer = WordNetLemmatizer()
    return [lemmatizer.lemmatize(token) for token in x]

# Function for the button to perform the test the input is spam or not spam or important email when clicked
class CustomButton(QtWidgets.QPushButton):
    def __init__(self, Subject_Input, Content_Input, Priority_Output, Spam_Output, parent=None):
        super().__init__(parent)
        self.Subject_Input = Subject_Input
        self.Content_Input = Content_Input
        self.Priority_Output = Priority_Output
        self.Spam_Output = Spam_Output
        self.clicked.connect(self.handle_click)

    def handle_click(self):
        subject_text = self.Subject_Input.toPlainText()
        content_text = self.Content_Input.toPlainText()

        # Create DataFrame from content text
        data = {
            'subject': [subject_text],
            'content': [content_text],
            'email_text': [f"{subject_text} {content_text}"]
        }
        df = pd.DataFrame(data)

        # Clear previous outputs
        for i in reversed(range(self.Priority_Output.count())): 
            self.Priority_Output.itemAt(i).widget().setParent(None)
        for i in reversed(range(self.Spam_Output.count())): 
            self.Spam_Output.itemAt(i).widget().setParent(None)

        # Check if content text is spam
        is_spam = checkSpam(df)

        # Create label for the spam output
        spam_label = QtWidgets.QLabel("Spam" if is_spam else "Not Spam")
        self.Spam_Output.addWidget(spam_label)

        if not is_spam:
            # Tokenization
            df["subject"] = df["subject"].apply(lambda x: x.lower())
            df["content"] = df["content"].apply(lambda x: x.lower())
            df["subject"] = df["subject"].apply(nltk.word_tokenize)
            df["content"] = df["content"].apply(nltk.word_tokenize)
            # Stop word, punctuation, digit removal
            df["subject"] = df["subject"].apply(remove_unwanted_words)
            df["content"] = df["content"].apply(remove_unwanted_words)
            # Lemmatization
            df["subject"] = df["subject"].apply(lemmatization)
            df["subject"] = df["subject"].apply(" ".join)
            df["content"] = df["content"].apply(lemmatization)
            df["content"] = df["content"].apply(" ".join)
            result = rank_message(df.iloc[0, :])
            priority_label = QtWidgets.QLabel(f"Important! ({result[0]})" if result[0] > 32 else f"Not Important! ({result[0]})")
            self.Priority_Output.addWidget(priority_label)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form1()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
